[] + [] → "" (empty string)

[] + {} → "[object Object]"

{} + [] → 0 (block + array)

1 + '1' → "11"

1 - '1' → 0

'5' * '2' → 10

'10' - true → 9

'10' + true → "10true"

null + 1 → 1

undefined + 1 → NaN

[] == false → true

[] == [] → false (ref compare)

[1,2] == '1,2' → true (toString)

{ } == { } → false

'' == 0 → true

!!'false' == !!'true' → true

false == '0' → true

null == undefined → true

null === undefined → false

'' == false → true

true + false → 1

'1' + 1 + 9 → "119"

{} + 1 → 1 or NaN (context)

'123' + 123 → "123123"

true + true → 2

typeof 42 → "number"

[] === false → false

undefined + 1 → NaN

1 + true + 1 → 3

"5" + 2 + 3 → "523"

+true → 1 (and ++true will give error )

Boolean([]) → true

Boolean("false") → true

Boolean(false) → true

'b' + 'a' + + 'a' + 'a' → "baNaNa" 🍌

'4' * 2 → 8

typeof null → "object"

false == 0 → true

'' == 0 → true

0 === false → false

0 == false → true

📌 Important Topics You Might’ve Missed in Coercion:
Topic	Why It’s Important

Falsy/Truthy Values	false, 0, '', null, undefined, NaN are falsy — rest are truthy.
  
Unary + operator	Converts non-numbers to number. Ex: +'42' → 42, +[] → 0

isNaN() vs Number.isNaN()	isNaN('hello') is true, but Number.isNaN('hello') is false

Loose (==) vs Strict (===) Equality	Know which one does coercion (==)
  
Object to primitive coercion	Using valueOf() and toString() — objects become strings/numbers when forced
  
[] == ![] → true	Mind-bending logic due to coercion ................([]==[] false due to reference checking)

Template Literals & Coercion	${null}, ${undefined}, ${true} etc

Custom .toString() / .valueOf() methods	Useful when coercing class instances

💥 Bonus Interview-Level Questions (Add to Test):
What is the result of typeof NaN? → "number"

Why does typeof null === 'object' return true? → Legacy bug in JS

What is 0 + '0' - 0? → 0

Why does '5' + + '5' return "55"? → Unary + converts '5' to 5

What is false + true + "1"? → "11"

1 < 2 < 3 vs 3 > 2 > 1 — explain difference? → Due to coercion: left returns true, right returns false

'true' == true → false (no numeric coercion here)

true == '1' → true (both coerce to 1)

[] + 1 → '1' (array becomes empty string, then string concat)

[null] + 1 → 'null1'


console.log([null] == false); = true
console.log([undefined] == false) =true
console.log(false == 'false') = false
console.log("5" == 5) = true
console.log(parseInt('08')) = 8
console.log(' \t\r\n ' == 0) true - Ye ek string hai, sirf whitespaces:
                                    \t → tab
                                    \r → carriage return
                                    \n → newline
                                    So string me koi visible character nahi hai, bas spaces/tabs/newlines.
console.log(null == 0)  false
console.log(Number([]))  0
console.log([] == ![]) true
console.log([1] + 1); 11
console.log([] + 1); 1
console.log([] + {}); [[object Object]]
console.log([] == []); false
console.log([]==={}) false
console.log([] + []); ""
console.log([] + {});[object Object]
console.log({} + []);[object Object]
console.log(null === undefined); false
console.log(null == undefined); true



[] == ![]..... Why is this true?

🔍 Step-by-step Breakdown:
🧩 Step 1: Evaluate ![]
[] is truthy....So ![] is false 
[] == false
🧩 Step 2: Now evaluate [] == false
Here comes type coercion with == (loose equality):
One is an object ([]), One is a boolean (false)
So JS converts both to primitives before comparing.
🧪 Coercion Rules in Action:
Step 2.1: Convert false to Number , false → 0
Step 2.2: Convert [] to primitive , [].toString() → "" (empty string)
"" → when coerced to Number → 0

So now you’re comparing: 0 == 0 
✅ Final Result: [] == ![]  →  [] == false  →  0 == 0  →  true


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

JavaScript Medium & Hard Output-Based Interview Questions
========================================================
100 Essential Questions for Technical Interviews

This comprehensive collection contains 100 carefully selected JavaScript output-based 
interview questions ranging from medium to hard difficulty.

HOISTING & VARIABLE DECLARATIONS
===============================

1. What's the output?
console.log(x);             - undefine
var x = 5;
console.log(x);                   5

2. What's the output?
function sayHi() {
  console.log(name);
  console.log(age);
  var name = 'Lydia';
  let age = 21;
}
sayHi();                         lydia, error age not defined 

3. What's the output?
var x = 1;
function foo() {
  x = 10;
  return;
  function x() {}
}
foo();
console.log(x);                    1 - var are functional scoped variables 

4. What's the output?
console.log(printName());              hi my name...
function printName(){
    return "Hi my name is Bob"
}

5. What's the output?
console.log(printName());              printanme is not defined (but it works better in react)
const printName = () => {
    return "Hi my name is Bob"
}

CLOSURES & SCOPE
===============

6. What's the output?
for (var i = 0; i < 3; i++) {
  setTimeout(() => console.log(i), 1);
}                                                   3,3,3 (it can print 0,1,2 if i pas settimeout in iffi function)

for (let i = 0; i < 3; i++) {
  setTimeout(() => console.log(i), 1);
}                                                        0,1,2

7. What's the output?
function outer() {
  var x = 20;
  function inner() {
    console.log(x);
    var x = 30;
  }
  inner();
}
outer();                           undefined x first got in self bolck eitther is is undefined 

8. What's the output?
let a = 10;
if(true){
   let a = 20;
   console.log(a, "inside");
}
console.log(a, "outside");            20 "inside" 10 "outside"

THIS BINDING & ARROW FUNCTIONS
==============================

9. What's the output?
const shape = {
  radius: 10,
  diameter() {
    return this.radius * 2;
  },
  perimeter: () => 2 * Math.PI * this.radius,
};

console.log(shape.diameter());                20 ,
console.log(shape.perimeter());               NAN (becouse this.radius is unefined in perameter funtion... 2* 22/7 * undefiend = isNaN)

10. What's the output?
const person = { name: 'Lydia' };

function sayHi(age) {
  return ${this.name} is ${age};
}

console.log(sayHi.call(person, 21));                 lydia is 21
console.log(sayHi.bind(person, 21));                function console hoga ---- to get value we need to call it again

11. What's the output?
var person = {
  name: 'John',
  greet: function() {
    console.log('Hello, ' + this.name);
  }
};

console.log(person.greet())          ----------- it can give output of hello john
 var greetFunc = person.greet; -> this line cannot work, it needs to bind with the bind function (as a standalone function) without bind it will give hello undefined
var greetFunc = person.greet.bind(person);
greetFunc();

OBJECTS & REFERENCES
===================

12. What's the output?
let c = { greeting: 'Hey!' };
let d;
d = c;
c.greeting = 'Hello';
console.log(d.greeting);              hello

13. What's the output?
const a = {};
const b = { key: 'b' };
const c = { key: 'c' };
a[b] = 123;                            a["object:object"] = 123
a[c] = 456;                            a["object:object"] = 456
console.log(a[b]);                      456

14. What's the output?
const obj = { a: 'one', b: 'two', a: 'three' };
console.log(obj);                             {a:three. b:two}        

15. What's the output?
function checkAge(data) {
  if (data === { age: 18 }) {
    console.log('You are an adult!');
  } else if (data == { age: 18 }) {
    console.log('You are still an adult.');
  } else {
    console.log(Hmm.. You don't have an age I guess);
  }
}
checkAge({ age: 18 });                                  hmm... you dont have an age i guess 

TYPE COERCION & COMPARISONS
==========================

16. What's the output?
console.log(3 + 4 + '5');                             75

17. What's the output?
console.log('10'+20+30);                                 102030
console.log('10'+'20'+30);                                   102030
console.log(10+20+'30');                                       3030

18. What's the output?
console.log(3 > 2 > 1);                        true>1 -----> 1>1 ----- false ans 
console.log(3 > 2 > 0);                               true answer 

19. What's the output?
console.log([] + []);                                    "" emplty stirng

20. What's the output?
let a = 3;
let b = new Number(3);
let c = 3;

console.log(a == b);                          true
console.log(a === b);                          falswe
console.log(b === c);                              false

21. What's the output?
console.log(+true);                                1
console.log(!'Lydia');                               false
console.log(++true);                          -------------> error 

22. What's the output?
console.log(typeof typeof 1);                        string

ARRAYS & ARRAY METHODS
=====================

23. What's the output?
const numbers = [1, 2, 3];
numbers[10] = 11;
console.log(numbers);                         1,2,3, <7 empty items> , 11

24. What's the output?
var array = ["1","2","3","4","5"];
delete array[3];
console.log(array.length);       4

25. What's the output?
[1, 2, 3].map(num => {
  if (typeof num === 'number') return;
  return num * 2;
});                                                  [undefined, undefined, undefined]

26. What's the output?
const arr1 = [1,2,3];
const arr2 = [1,2,3];
const str = "1,2,3";

console.log(arr1 == str);                true
console.log(arr1 == arr2);           false

27. What's the output?
console.log([11, 2, 31] + [4, 5, 6]);           [11,2,314,5,6]

EVENT LOOP & ASYNCHRONOUS PROGRAMMING
====================================

28. What's the output?
const foo = () => console.log('First');
const bar = () => setTimeout(() => console.log('Second'));
const baz = () => console.log('Third');

bar();
foo();
baz();                                             first , third, second

29. What's the output?
console.log('Start');

setTimeout(function() {
  console.log('Timeout');
}, 0);

Promise.resolve().then(function() {
  console.log('Promise');
});

console.log('End');                      start end promise, timout

30. What's the output?
function hello() {
  console.log("1");
    setTimeout(() => {
        console.log("2");
    })
  console.log("3");
}
hello();                                    1, 3, 2

PROMISES & ASYNC/AWAIT
=====================

31. What's the output?
const firstPromise = new Promise((res, rej) => {
  setTimeout(res, 500, 'one');
});

const secondPromise = new Promise((res, rej) => {
  setTimeout(res, 100, 'two');
});

Promise.race([firstPromise, secondPromise]).then(res => console.log(res));           -------->  two

32. What's the output?
async function getData() {
  return await Promise.resolve('I made it!');
}

const data = getData(); 
console.log(data);    -----------------> pending promise...  to get the data use try catch block so that i made it can console         

33. What's the output?
Promise.resolve(1)
  .then(() => 2)
  .then(() => 3)
  .then(console.log);       ---------> 3

FUNCTIONS & ADVANCED CONCEPTS
============================

34. What's the output?
function sum(a, b) {
  return a + b;
}
sum(1, '2');               -------> 12

35. What's the output?
function sayHi() {
  return (() => 0)();
}
console.log(typeof sayHi());            ----- number

36. What's the output?
function getAge(...args) {
  console.log(typeof args);
}
getAge(21);                    -------> object.......     argument are in array so type of object

37. What's the output?
function* generator(i) {
  yield i;
  yield i * 2;
}

const gen = generator(10);

console.log(gen.next().value);
console.log(gen.next().value);

PROTOTYPES & CLASSES
===================

38. What's the output?
class Chameleon {
  static colorChange(newColor){                 ye static class k upr h kisis instances k upr ni (mas it cannot b use but any other 
    this.newColor = newColor;                      to ye bs chameloen.colorChange se access kiya ja sakta h not by freddie.colorChange
    return this.newColor;
  }

  constructor({ newColor = 'green' } = {}){
    this.newColor = newColor;
  }
}

const freddie = new Chameleon({ newColor: 'purple' });
console.log(freddie.colorChange('orange'));           --------->   TypeError: freddie.colorChange is not a function

39. What's the output?
function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
}

const member = new Person('Lydia', 'Hallie');
Person.getFullName = function() {                            ----- ye person funtion k upr ek proety bana ra h na ki on instance (member) (mtl idr perosn ki jaga meember likhe to memeber pr ek property banaye jo memebre me hi accessabile hogi )
  return ${this.firstName} ${this.lastName}; 
};

console.log(member.getFullName());    = TypeError: member.getFullName is not a function

SPREAD OPERATOR & DESTRUCTURING
==============================

40. What's the output?
const person1 = { name: 'xyz', age: 21 };
const person2 = { city: 'abc', ...person1 };
console.log(person2);               {city, name, age} all

41. What's the output?
const user = {
name: "Surbhi dighe",
country: "India"
};
const { name: fullname, country } = user;
console.log(fullname);      Surbhi dighe
console.log(name);        name is not defined

42. What's the output?
[...'Lydia'];                 -----------> [l,y,d,i,a]

ERROR HANDLING & TRY-CATCH
==========================

43. What's the output?
(() => {
  let x, y;
  try {
    throw new Error();
  } catch (x) {
    (x = 1), (y = 2);
    console.log(x);            1 
  }
  console.log(x);            undefiend
  console.log(y);          2 
})();

ADVANCED TYPE CHECKING
=====================

44. What's the output?
const obj = { 1: 'a', 2: 'b', 3: 'c' };
const set = new Set([1, 2, 3, 4, 5]);

console.log(obj.hasOwnProperty('1'));         ------- true
console.log(obj.hasOwnProperty(1));            --------true
console.log(set.has('1'));                   false
console.log(set.has(1));                      true

45. What's the output?
console.log(0 == false);            true
console.log(1 == true);          true

COMPLEX LOGIC & LOOPS
====================

46. What's the output?
for (let i = 1; i < 5; i++) {
  if (i === 3) continue;
  console.log(i);              
}                            1,2,4

47. What's the output?
let number = 0;
console.log(number++);                0
console.log(++number);                2
console.log(number);                  2      

STRING METHODS & TEMPLATE LITERALS
=================================

48. What's the output?

function getPersonInfo(one, two, three) {
  console.log(one);             -----------[ '', ' is ', ' years old' ]
  console.log(two);                 --------Lydia
  console.log(three);                ------21
}

const person = 'Lydia';
const age = 21;                                    
getPersonInfo`${person} is ${age} years old`;   ---------tagged template literal
                                                Function ko 2 cheezein milti hain automatically:
                                                  strings array → static parts of the template....Static strings → ["", " is ", " years old"]
                                                  substitutions → values inside ${}......Substitutions → ["Lydia", 21]

49. What's the output?
console.log('apple'.split(''));           [a,p,p,l,e]

REGULAR EXPRESSIONS & PARSING
============================

50. What's the output?
const num = parseInt('7*6', 10);    How '7*6' is parsed.....  parseInt(string, radix)
                                    String: '7*6'
                                    Radix: 10 (decimal)
                                    Parsing steps:
                                    First char '7' → valid digit in base 10 → keep it
                                    Next char '*' → invalid → stop parsing
                                    So only '7' is considered → converted to number -----→ 7        

ADVANCED OBJECT MANIPULATION
===========================

51. What's the output?
let person = { name: 'Lydia' };
const members = [person];
person = null;

console.log(members);               --------[{ name: 'Lydia' }]

52. What's the output?
function getInfo(member, year) {
  member.name = 'Lydia';
  year = '1998';
}

const person = { name: 'Sarah' };
const birthYear = '1997';

getInfo(person, birthYear);              

console.log(person, birthYear);          -----------name:"lydia, year: 1997
 
REDUCE & ARRAY OPERATIONS
========================

53. What's the output?
[[0, 1], [2, 3]].reduce(
  (acc, cur) => {
    return acc.concat(cur);
  },
  [1, 2],
);                                      ------------------[1,2,0,1,2,3]

BOOLEAN LOGIC & FALSY VALUES
===========================

54. What's the output?
!!null;             ------false
!!'';                    false
!!1;                      true

55. Which of these values are falsy?    ----------falsy values      false, 0, -0, 0n (BigInt zero), "" (empty string), null, undefined, NaN
  0;                          falsy
  new Number(0);
  ('');                       falsy
  (' ');
  new Boolean(false);          
  undefined;                  falsy

VARIABLE REDECLARATION
=====================

56. What's the output?
var num = 8;
var num = 10;
console.log(num);           10

57. What's the output?
var a = 10;
let a = 20;
console.log(a)              a already being declared

OBJECT PROPERTY ACCESS
=====================

58. What's the output?
const bird = {
  size: 'small',
};

const mouse = {
  name: 'Mickey',
  small: true,
};

mouse[bird.size];              mouse.small = true        (bird.size = small )
mouse[bird["size"]];             true
mouse.bird.size;               mouse.bird is undefiend --------- error (undefied.size) TypeError

JSON & OBJECT METHODS
====================

59. What's the output?
let x = '{ "b": 1, "c": 2 }';
let y = JSON.parse(x);
console.log(typeof y);          ----------- object

60. What's the output?
let x = { b: 1, c: 2 };
let y = Object.keys(x);
console.log(y.length);      --------------------2

SWITCH STATEMENTS
================

61. What's the output?
let text;
switch (1) {
  case 0:
    text = "This is zero";
    break;
  case 1:
    text = "This is one";
  case 2:
    text = "This is two";
    break;
  default:
    text = "No matches found!";
}
console.log(text);                        switch(1) → means: go to case 1.

                                Enters case 1:
                                → text = "This is one";
                                ⚠️ But there’s no break here!

                                Since there’s no break → execution falls through to the next case (case 2).

                                case 2:
                                → text = "This is two"; --------------- answer 
                                → break; stops execution here

ADVANCED ARRAY FILTERING
=======================

62. What's the output?
const arr = [11, 0, '', false, 2, 1];
const filtered = arr.filter(Boolean);
console.log(filtered);        ---------- [11,2,1]

63. What's the output?
const arr = [10, -1, 2];
arr.sort((a, b) => a - b);
console.log(arr);                           -1, 2,10

DEEP VS SHALLOW COPY
===================

64. What's the output?
let a={ x:1, y: {alpha:10,beta:20} };
let b = {...a};
b.x=101;
b.y.alpha=1001; 
console.log(a.x);                         1
console.log(a.y.alpha);                    1001

65. What's the output?
const userDetails = {
  firstName: "Surbhi",
  lastName: "Dighe",
  age: 20,
  address: {
    city: "Hyderabad",
    country: "India",
  },
};

let cloneUserDetails = { ...userDetails };
userDetails.age = 22;
userDetails.address.city = "Banglore";

console.log(cloneUserDetails.age);                              22
console.log(cloneUserDetails.address.city);                     Banglore

GLOBAL OBJECTS & WINDOW
=======================

66. What's the output?
let greeting;
greetign = {}; // Typo!
console.log(greetign);                   -------  {}

67. What's the output?
function bark() {
  console.log('Woof!');
}

bark.animal = 'dog';
console.log(bark.animal)            dog in output
console.log(bark)                   [Function: bark] { animal: 'dog' } ------ function with value (function ek object bhi hota hai jisme extra properties attach kar sakte hai.)
console.log(bark())                 Woof!
// What happens?                            become an varable now 

ADVANCED STRING OPERATIONS
==========================

68. What's the output?
String.prototype.giveLydiaPizza = () => {
  return 'Just give Lydia pizza already!';
};

const name = 'Lydia';

console.log(name.giveLydiaPizza())               ----------------   Just give Lydia pizza already!

COMPLEX ASYNC PATTERNS
======================

69. What's the output?
queueMicrotask(() => console.log('microtask'));
setTimeout(() => console.log('timeout'), 0);
Promise.resolve().then(() => console.log('promise'));
console.log('sync');                                          sync, microtask, promise, timeout                            

ADVANCED FUNCTION FEATURES
==========================

70. What's the output?
function sum(a=5, b=7){
    return a+b;
}
console.log(sum(undefined, 20));                                 25

71. What's the output?
const sum = eval('10*10+5');                            
console.log(sum)                                -------------- 105

PROTOTYPE CHAIN
==============

72. What's the output?
function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
}

const lydia = new Person('Lydia', 'Hallie');                
const sarah = Person('Sarah', 'Smith');

console.log(lydia);                  {firstname lydia, lastname:Hallie}    
console.log(sarah);                    undefined

FOR-IN LOOPS
===========

73. What's the output?
const person = {
  name: 'Lydia',
  age: 21,
};

for (const item in person) {
  console.log(item);                         name. age
}                                          

COMPLEX COMPARISONS
==================

74. What's the output?
console.log(5 < 6 < 7);                             true<7------------true

75. What's the output?
console.log(7 > 6 > 5);                                true>5  -------- false

ARRAY INDEX OPERATIONS
======================

76. What's the output?
const arr = [2,3,5,2,8,10,5];
console.log(arr.indexOf(5))               -----------------  2

77. What's the output?
const array = [8, 18, 28, 38];
const result = array.map(element => element + 2)             
               .filter((element) => element > 25);
console.log(result);                                 ------------- [30,40]

VARIABLE SCOPE EDGE CASES
========================

78. What's the output?
let x = ["a","b","c"];
let y = ["a","b","c"];
let z = y;                     
console.log(x == y);                  // false
console.log(z == y);                    true  
console.log(z == x);                      false

79. What's the output?
let x;
console.log(x);             // undefied
x = 20;
console.log(x);             // 20
x = "John";
console.log(x);                 //john

FUNCTION PARAMETER HANDLING
==========================

80. What's the output?
function modify(obj) {
    obj.name = "Updated";
}

let person = { name: "Original" };
modify(person);
console.log(person.name);             -----------updated

function reassign(obj) {
    obj = { name: "New Object" };
}

reassign(person);
console.log(person.name);                ------------ updated

COMPLEX OBJECT OPERATIONS
========================

81. What's the output?
const a = {x : 1};
const b = {x : 1};
console.log(a === b);                           //false
console.log(a.x === b.x)                        //  true

82. What's the output?
const arr = ["A","B","C","D","E"]
console.log(Object.keys(arr));        [0,1,2,3,4]      insted of error inde becomes key            

DESTRUCTURING WITH DEFAULTS
===========================

83. What's the output?
const person = {
  firstName: 'Surbhi',
};
const { lastName="dighe" } = person;
console.log(lastName);                           dighe, and person = { firstName: 'Surbhi' } not last name included in it      

84. What's the output?
const person = {
  firstName: 'Surbhi',
};
const { firstName="Henry"} = person;
console.log(firstName);                           ------ surbhi    as this key exist with value tyhat why henry not consoled     

VARIABLE TRUTHINESS
==================

85. What's the output?
var x = 0;
var y = 10;
if(x){
  console.log(x);                       nothing will console          
}
if(y){
  console.log(y);                        10
}

OBJECT DESTRUCTURING
===================

86. What's the output?
const obj = {
var1: 1,
var2: 2
};
const { var1, var2 } = obj;
console.log(var1, var2);                           1,2

ARRAY TYPE CHECKING
==================

87. What's the output?
function checkValue(value){
    var result = Array.isArray(value);
    console.log(result);                                  true
}
checkValue([1,2,3]);

MATHEMATICAL OPERATIONS
======================

88. What's the output?
console.log(10 - "5");                            5
console.log("5" - 10);                            -5

89. What's the output?
console.log(10 + "5");                               105
console.log("5" + 10);                               510

ADVANCED VARIABLE ASSIGNMENT
============================

90. What's the output?
var z = 1,
y = z = typeof y;
console.log(y, z);                                  undefined, undefined

91. What's the output?
let f = "8";
let a = 1;
console.log((+f)+a+1);                             8+1+1 =10

POST/PRE INCREMENT
=================

92. What's the output?
let x = 5;
let y = x++;
console.log(y);                                  5
console.log(x)                                   6

93. What's the output?
let x = 5;
let y = ++x;
console.log(y);                             6
console.log(x)                              6

DELETE OPERATOR
==============

94. What's the output?
var Employee = {
company: 'Acme'
}

var employee1 = Object.create(Employee);
delete employee1.company
console.log(employee1.company);                       acme

delete Employee.company
console.log(employee1.company);                       undefined

FUNCTION RETURN STATEMENTS
=========================

95. What's the output?
function f1(){
  return {name: "Sandeep" };
}

function f2() {
  return {   name: "Sandeep"   };
}

console.log(f1());               {name:Sandeep}
console.log(f2());              {name:Sandeep}

ADVANCED ARRAY OPERATIONS
========================

96. What's the output?
const arr = [1, 2, 3, 4, 5, -6, 7];
arr.length = 0;
console.log(arr);                          []

COMPLEX ASYNC WITH MULTIPLE APIS
===============================

97. What's the output order?
console.log('1');

queueMicrotask(() => console.log('2'));

setTimeout(() => console.log('3'), 0);

new Promise(resolve => {
  console.log('4');
  resolve();
}).then(() => console.log('5'));

console.log('6');                          ---------------      1,4,6,2,5,3

ADDITIONAL CHALLENGING QUESTIONS
===============================

98. What's the output?
const x = function(a) {
  delete a;
  return a;
}
console.log(x(1));                        --------------  1

99. What's the output?
let obj = {a: 1, b: 2, a: 3};
console.log(Object.keys(obj));

100. What's the output?
(function(){
    var a = b = 3;
})();
console.log("a defined? " + (typeof a !== 'undefined'));                a defined? false
console.log("b defined? " + (typeof b !== 'undefined'));                b defined? true


