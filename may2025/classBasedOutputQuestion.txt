
Q1. (class basics)
Predict the output of the following JavaScript code:
 

class Person {
constructor(name) {
this.name = name;
}
}
const p = new Person("Alex");
console.log(p.name);                                        alex
 


Q2. (constructor)
Predict the output of the following JavaScript code:
 
// Topic: constructor
class Demo {
constructor(a, b = 10) {
console.log(a + b);                                       15
}
}
new Demo(5);                                             
 
Q3. (inheritance)
Predict the output of the following JavaScript code:
 
// Topic: inheritance
class A {
say1() { return "A"; }
}
class B extends A {
say() { return "B"; }
}
const obj = new B();                          
console.log(obj.say());                                 "B"  if say1 then ---- A
 
Q4. (method overriding)
Predict the output of the following JavaScript code:
 
// Topic: method overriding
class Parent {
greet() { return "Hello"; }
}
class Child extends Parent {
greet() { return "Hi"; }
}
console.log(new Child().greet());                                  hi
console.log(Child.greet());                                        Child.greet is not a function
 
Q5. (encapsulation)
Predict the output of the following JavaScript code:
 
// Topic: encapsulation
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();                                                       10                                         
 
Q6. (static methods)
Predict the output of the following JavaScript code:
 
// Topic: static methods
class X {
static ping() { return "pong"; }
}
const trye = new X()                                          
console.log(trye.ping)                                       trye.ping is not a function (static is not inherited)
console.log(X.ping());                                       "pong"
 
Q7. (getters/setters)
Predict the output of the following JavaScript code:
 
// Topic: getters/setters
class Example {
constructor(v) { this._v = v; }
get val() { return this._v * 2; }
}
console.log(new Example(5).val);                                  10
 
Q8. (private fields)
Predict the output of the following JavaScript code:
 
// Topic: private fields
class Secret {
#x = 42;
reveal() { return this.#x; }
}
console.log(new Secret().reveal());                                   42
 
Q9. (polymorphism)
Predict the output of the following JavaScript code:
 
// Topic: polymorphism
class Shape {
    area() { return 0; }
}
class Circle extends Shape {
    constructor(r) { super(); this.r = r; }
        area() { return 3.14 * this.r * this.r; }
}

const s = new Circle(3);
console.log(s.area());                                            3.14*3*3
 
Q10. (object references)
Predict the output of the following JavaScript code:
 
// Topic: object references
// Custom tricky snippet
class Test {
    constructor() {
        this.value = 10;
        setTimeout(() => console.log(this.value), 0);
    }
}
new Test();                                                             10        
 
Q11. (super keyword)
Predict the output of the following JavaScript code:
 
// Topic: super keyword
class Base {
    show() { return "Base"; }
}
class Derived extends Base {
    show() { return super.show() + " Derived"; }
}
console.log(new Derived().show());                                           based derived
 
Q12. (prototype chain)
Predict the output of the following JavaScript code:
 
// Topic: prototype chain
// Custom tricky snippet
class Test {
    constructor() {
        this.value = 10;
        setTimeout(() => console.log(this.value), 0);
    }
}
new Test();                                                               10
 
Q13. (arrow function in class)
Predict the output of the following JavaScript code:
 
// Topic: arrow function in class
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();                                                       10
 
Q14. (binding issues)
Predict the output of the following JavaScript code:
 
// Topic: binding issues
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q15. (this keyword)
Predict the output of the following JavaScript code:
 
// Topic: this keyword
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q16. (abstract-like behavior)
Predict the output of the following JavaScript code:
 
// Topic: abstract-like behavior
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q17. (composition)
Predict the output of the following JavaScript code:
 
// Topic: composition
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q18. (factory with class)
Predict the output of the following JavaScript code:
 
// Topic: factory with class
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q19. (multiple inheritance simulation)
Predict the output of the following JavaScript code:
 
// Topic: multiple inheritance simulation
class A {
say() { return "A"; }
}
class B extends A {
say() { return "B"; }
}
const obj = new B();
console.log(obj.say());
 
Q20. (edge cases and tricky syntax)
Predict the output of the following JavaScript code:
 
// Topic: edge cases and tricky syntax
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q21. (class basics)
Predict the output of the following JavaScript code:
 
// Topic: class basics
class Person {
constructor(name) {
this.name = name;
}
}
const p = new Person("Alex");
console.log(p.name);
 
Q22. (constructor)
Predict the output of the following JavaScript code:
 
// Topic: constructor
class Demo {
constructor(a, b = 10) {
console.log(a + b);
}
}
new Demo(5);
 
Q23. (inheritance)
Predict the output of the following JavaScript code:
 
// Topic: inheritance
class A {
say() { return "A"; }
}
class B extends A {
say() { return "B"; }
}
const obj = new B();
console.log(obj.say());
 
Q24. (method overriding)
Predict the output of the following JavaScript code:
 
// Topic: method overriding
class Parent {
greet() { return "Hello"; }
}
class Child extends Parent {
greet() { return "Hi"; }
}
console.log(new Child().greet());
 
Q25. (encapsulation)
Predict the output of the following JavaScript code:
 
// Topic: encapsulation
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q26. (static methods)
Predict the output of the following JavaScript code:
 
// Topic: static methods
class X {
static ping() { return "pong"; }
}
console.log(X.ping());
 
Q27. (getters/setters)
Predict the output of the following JavaScript code:
 
// Topic: getters/setters
class Example {
constructor(v) { this._v = v; }
get val() { return this._v * 2; }
}
console.log(new Example(5).val);
 
Q28. (private fields)
Predict the output of the following JavaScript code:
 
// Topic: private fields
class Secret {
#x = 42;
reveal() { return this.#x; }
}
console.log(new Secret().reveal());
 
Q29. (polymorphism)
Predict the output of the following JavaScript code:
 
// Topic: polymorphism
class Shape {
area() { return 0; }
}
class Circle extends Shape {
constructor(r) { super(); this.r = r; }
area() { return 3.14 * this.r * this.r; }
}
const s = new Circle(3);
console.log(s.area());
 
Q30. (object references)
Predict the output of the following JavaScript code:
 
// Topic: object references
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q31. (super keyword)
Predict the output of the following JavaScript code:
 
// Topic: super keyword
class Base {
show() { return "Base"; }
}
class Derived extends Base {
show() { return super.show() + " Derived"; }
}
console.log(new Derived().show());
 
Q32. (prototype chain)
Predict the output of the following JavaScript code:
 
// Topic: prototype chain
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q33. (arrow function in class)
Predict the output of the following JavaScript code:
 
// Topic: arrow function in class
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q34. (binding issues)
Predict the output of the following JavaScript code:
 
// Topic: binding issues
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q35. (this keyword)
Predict the output of the following JavaScript code:
 
// Topic: this keyword
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q36. (abstract-like behavior)
Predict the output of the following JavaScript code:
 
// Topic: abstract-like behavior
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q37. (composition)
Predict the output of the following JavaScript code:
 
// Topic: composition
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q38. (factory with class)
Predict the output of the following JavaScript code:
 
// Topic: factory with class
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q39. (multiple inheritance simulation)
Predict the output of the following JavaScript code:
 
// Topic: multiple inheritance simulation
class A {
say() { return "A"; }
}
class B extends A {
say() { return "B"; }
}
const obj = new B();
console.log(obj.say());
 
Q40. (edge cases and tricky syntax)
Predict the output of the following JavaScript code:
 
// Topic: edge cases and tricky syntax
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q41. (class basics)
Predict the output of the following JavaScript code:
 
// Topic: class basics
class Person {
constructor(name) {
this.name = name;
}
}
const p = new Person("Alex");
console.log(p.name);
 
Q42. (constructor)
Predict the output of the following JavaScript code:
 
// Topic: constructor
class Demo {
constructor(a, b = 10) {
console.log(a + b);
}
}
new Demo(5);
 
Q43. (inheritance)
Predict the output of the following JavaScript code:
 
// Topic: inheritance
class A {
say() { return "A"; }
}
class B extends A {
say() { return "B"; }
}
const obj = new B();
console.log(obj.say());
 
Q44. (method overriding)
Predict the output of the following JavaScript code:
 
// Topic: method overriding
class Parent {
greet() { return "Hello"; }
}
class Child extends Parent {
greet() { return "Hi"; }
}
console.log(new Child().greet());
 
Q45. (encapsulation)
Predict the output of the following JavaScript code:
 
// Topic: encapsulation
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q46. (static methods)
Predict the output of the following JavaScript code:
 
// Topic: static methods
class X {
static ping() { return "pong"; }
}
console.log(X.ping());
 
Q47. (getters/setters)
Predict the output of the following JavaScript code:
 
// Topic: getters/setters
class Example {
constructor(v) { this._v = v; }
get val() { return this._v * 2; }
}
console.log(new Example(5).val);
 
Q48. (private fields)
Predict the output of the following JavaScript code:
 
// Topic: private fields
class Secret {
#x = 42;
reveal() { return this.#x; }
}
console.log(new Secret().reveal());
 
Q49. (polymorphism)
Predict the output of the following JavaScript code:
 
// Topic: polymorphism
class Shape {
area() { return 0; }
}
class Circle extends Shape {
constructor(r) { super(); this.r = r; }
area() { return 3.14 * this.r * this.r; }
}
const s = new Circle(3);
console.log(s.area());
 
Q50. (object references)
Predict the output of the following JavaScript code:
 
// Topic: object references
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q51. (super keyword)
Predict the output of the following JavaScript code:
 
// Topic: super keyword
class Base {
show() { return "Base"; }
}
class Derived extends Base {
show() { return super.show() + " Derived"; }
}
console.log(new Derived().show());
 
Q52. (prototype chain)
Predict the output of the following JavaScript code:
 
// Topic: prototype chain
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q53. (arrow function in class)
Predict the output of the following JavaScript code:
 
// Topic: arrow function in class
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q54. (binding issues)
Predict the output of the following JavaScript code:
 
// Topic: binding issues
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q55. (this keyword)
Predict the output of the following JavaScript code:
 
// Topic: this keyword
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q56. (abstract-like behavior)
Predict the output of the following JavaScript code:
 
// Topic: abstract-like behavior
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q57. (composition)
Predict the output of the following JavaScript code:
 
// Topic: composition
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q58. (factory with class)
Predict the output of the following JavaScript code:
 
// Topic: factory with class
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q59. (multiple inheritance simulation)
Predict the output of the following JavaScript code:
 
// Topic: multiple inheritance simulation
class A {
say() { return "A"; }
}
class B extends A {
say() { return "B"; }
}
const obj = new B();
console.log(obj.say());
 
Q60. (edge cases and tricky syntax)
Predict the output of the following JavaScript code:
 
// Topic: edge cases and tricky syntax
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q61. (class basics)
Predict the output of the following JavaScript code:
 
// Topic: class basics
class Person {
constructor(name) {
this.name = name;
}
}
const p = new Person("Alex");
console.log(p.name);
 
Q62. (constructor)
Predict the output of the following JavaScript code:
 
// Topic: constructor
class Demo {
constructor(a, b = 10) {
console.log(a + b);
}
}
new Demo(5);
 
Q63. (inheritance)
Predict the output of the following JavaScript code:
 
// Topic: inheritance
class A {
say() { return "A"; }
}
class B extends A {
say() { return "B"; }
}
const obj = new B();
console.log(obj.say());
 
Q64. (method overriding)
Predict the output of the following JavaScript code:
 
// Topic: method overriding
class Parent {
greet() { return "Hello"; }
}
class Child extends Parent {
greet() { return "Hi"; }
}
console.log(new Child().greet());
 
Q65. (encapsulation)
Predict the output of the following JavaScript code:
 
// Topic: encapsulation
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q66. (static methods)
Predict the output of the following JavaScript code:
 
// Topic: static methods
class X {
static ping() { return "pong"; }
}
console.log(X.ping());
 
Q67. (getters/setters)
Predict the output of the following JavaScript code:
 
// Topic: getters/setters
class Example {
constructor(v) { this._v = v; }
get val() { return this._v * 2; }
}
console.log(new Example(5).val);
 
Q68. (private fields)
Predict the output of the following JavaScript code:
 
// Topic: private fields
class Secret {
#x = 42;
reveal() { return this.#x; }
}
console.log(new Secret().reveal());
 
Q69. (polymorphism)
Predict the output of the following JavaScript code:
 
// Topic: polymorphism
class Shape {
area() { return 0; }
}
class Circle extends Shape {
constructor(r) { super(); this.r = r; }
area() { return 3.14 * this.r * this.r; }
}
const s = new Circle(3);
console.log(s.area());
 
Q70. (object references)
Predict the output of the following JavaScript code:
 
// Topic: object references
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q71. (super keyword)
Predict the output of the following JavaScript code:
 
// Topic: super keyword
class Base {
show() { return "Base"; }
}
class Derived extends Base {
show() { return super.show() + " Derived"; }
}
console.log(new Derived().show());
 
Q72. (prototype chain)
Predict the output of the following JavaScript code:
 
// Topic: prototype chain
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q73. (arrow function in class)
Predict the output of the following JavaScript code:
 
// Topic: arrow function in class
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q74. (binding issues)
Predict the output of the following JavaScript code:
 
// Topic: binding issues
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q75. (this keyword)
Predict the output of the following JavaScript code:
 
// Topic: this keyword
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q76. (abstract-like behavior)
Predict the output of the following JavaScript code:
 
// Topic: abstract-like behavior
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q77. (composition)
Predict the output of the following JavaScript code:
 
// Topic: composition
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q78. (factory with class)
Predict the output of the following JavaScript code:
 
// Topic: factory with class
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q79. (multiple inheritance simulation)
Predict the output of the following JavaScript code:
 
// Topic: multiple inheritance simulation
class A {
say() { return "A"; }
}
class B extends A {
say() { return "B"; }
}
const obj = new B();
console.log(obj.say());
 
Q80. (edge cases and tricky syntax)
Predict the output of the following JavaScript code:
 
// Topic: edge cases and tricky syntax
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q81. (class basics)
Predict the output of the following JavaScript code:
 
// Topic: class basics
class Person {
constructor(name) {
this.name = name;
}
}
const p = new Person("Alex");
console.log(p.name);
 
Q82. (constructor)
Predict the output of the following JavaScript code:
 
// Topic: constructor
class Demo {
constructor(a, b = 10) {
console.log(a + b);
}
}
new Demo(5);
 
Q83. (inheritance)
Predict the output of the following JavaScript code:
 
// Topic: inheritance
class A {
say() { return "A"; }
}
class B extends A {
say() { return "B"; }
}
const obj = new B();
console.log(obj.say());
 
Q84. (method overriding)
Predict the output of the following JavaScript code:
 
// Topic: method overriding
class Parent {
greet() { return "Hello"; }
}
class Child extends Parent {
greet() { return "Hi"; }
}
console.log(new Child().greet());
 
Q85. (encapsulation)
Predict the output of the following JavaScript code:
 
// Topic: encapsulation
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q86. (static methods)
Predict the output of the following JavaScript code:
 
// Topic: static methods
class X {
static ping() { return "pong"; }
}
console.log(X.ping());
 
Q87. (getters/setters)
Predict the output of the following JavaScript code:
 
// Topic: getters/setters
class Example {
constructor(v) { this._v = v; }
get val() { return this._v * 2; }
}
console.log(new Example(5).val);
 
Q88. (private fields)
Predict the output of the following JavaScript code:
 
// Topic: private fields
class Secret {
#x = 42;
reveal() { return this.#x; }
}
console.log(new Secret().reveal());
 
Q89. (polymorphism)
Predict the output of the following JavaScript code:
 
// Topic: polymorphism
class Shape {
area() { return 0; }
}
class Circle extends Shape {
constructor(r) { super(); this.r = r; }
area() { return 3.14 * this.r * this.r; }
}
const s = new Circle(3);
console.log(s.area());
 
Q90. (object references)
Predict the output of the following JavaScript code:
 
// Topic: object references
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q91. (super keyword)
Predict the output of the following JavaScript code:
 
// Topic: super keyword
class Base {
show() { return "Base"; }
}
class Derived extends Base {
show() { return super.show() + " Derived"; }
}
console.log(new Derived().show());
 
Q92. (prototype chain)
Predict the output of the following JavaScript code:
 
// Topic: prototype chain
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q93. (arrow function in class)
Predict the output of the following JavaScript code:
 
// Topic: arrow function in class
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q94. (binding issues)
Predict the output of the following JavaScript code:
 
// Topic: binding issues
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q95. (this keyword)
Predict the output of the following JavaScript code:
 
// Topic: this keyword
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q96. (abstract-like behavior)
Predict the output of the following JavaScript code:
 
// Topic: abstract-like behavior
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q97. (composition)
Predict the output of the following JavaScript code:
 
// Topic: composition
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q98. (factory with class)
Predict the output of the following JavaScript code:
 
// Topic: factory with class
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 
Q99. (multiple inheritance simulation)
Predict the output of the following JavaScript code:
 
// Topic: multiple inheritance simulation
class A {
say() { return "A"; }
}
class B extends A {
say() { return "B"; }
}
const obj = new B();
console.log(obj.say());
 
Q100. (edge cases and tricky syntax)
Predict the output of the following JavaScript code:
 
// Topic: edge cases and tricky syntax
// Custom tricky snippet
class Test {
constructor() {
this.value = 10;
setTimeout(() => console.log(this.value), 0);
}
}
new Test();
 



